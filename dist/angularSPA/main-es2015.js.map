{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/contact-us/contact-us.component.html","./src/app/landing-page/landing-page.component.html","./src/app/place-fitness-trainer-appointment/place-fitness-trainer-appointment.component.html","./src/app/view-appointment/view-appointment.component.html","./node_modules/tslib/tslib.es6.js","./src/app/_services/contact.service.ts","./src/app/_services/index.ts","./src/app/_services/user.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/contact-us/contact-us.component.ts","./src/app/landing-page/landing-page.component.ts","./src/app/place-fitness-trainer-appointment/place-fitness-trainer-appointment.component.ts","./src/app/view-appointment/view-appointment.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAe,qvF;;;;;;;;;;;;ACAf;AAAe,+hG;;;;;;;;;;;;ACAf;AAAe,0f;;;;;;;;;;;;ACAf;AAAe,yfAA0b,mJAAmJ,wzBAAwzB,iJAAiJ,6yBAA6yB,2IAA2I,06BAA06B,uJAAuJ,8iCAA8iC,uIAAuI,4sFAA4sF,2MAA2M,wxBAAwxB,uJAAuJ,4pBAA4pB,mJAAmJ,qrBAAqrB,iJAAiJ,8pBAA8pB,uJAAuJ,2+F;;;;;;;;;;;;ACAn8V;AAAe,wyBAAyuB,UAAU,uFAAuF,uCAAuC,uFAAuF,qBAAqB,uFAAuF,YAAY,uFAAuF,gBAAgB,uFAAuF,yBAAyB,uFAAuF,mBAAmB,wgCAAwgC,mKAAmK,47BAA47B,iKAAiK,i6BAAi6B,2JAA2J,+iCAA+iC,uKAAuK,8qCAA8qC,uJAAuJ,4jGAA4jG,2NAA2N,g5BAAg5B,uKAAuK,4vBAA4vB,mKAAmK,qxBAAqxB,iKAAiK,8vBAA8vB,uKAAuK,wgC;;;;;;;;;;;;ACAvzc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;;AAEO;AACP;AACA,mBAAmB,sBAAsB;AACzC;AACA;;AAEO;AACP;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;;AAEO;AACP,mCAAmC,oCAAoC;AACvE;;AAEO;AACP;AACA;;AAEO;AACP,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;;AAEO;AACP,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;;AAEO;AACP,4BAA4B,sBAAsB;AAClD;AACA;AACA;;AAEO;AACP,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,iBAAiB,sFAAsF,aAAa,EAAE;AACtH,sBAAsB,gCAAgC,qCAAqC,0CAA0C,EAAE,EAAE,GAAG;AAC5I,2BAA2B,MAAM,eAAe,EAAE,YAAY,oBAAoB,EAAE;AACpF,sBAAsB,oGAAoG;AAC1H,6BAA6B,uBAAuB;AACpD,4BAA4B,wBAAwB;AACpD,2BAA2B,yDAAyD;AACpF;;AAEO;AACP;AACA,iBAAiB,4CAA4C,SAAS,EAAE,qDAAqD,aAAa,EAAE;AAC5I,yBAAyB,6BAA6B,oBAAoB,gDAAgD,gBAAgB,EAAE,KAAK;AACjJ;;AAEO;AACP;AACA;AACA,2GAA2G,sFAAsF,aAAa,EAAE;AAChN,sBAAsB,8BAA8B,gDAAgD,uDAAuD,EAAE,EAAE,GAAG;AAClK,4CAA4C,sCAAsC,UAAU,oBAAoB,EAAE,EAAE,UAAU;AAC9H;;AAEO;AACP,gCAAgC,uCAAuC,aAAa,EAAE,EAAE,OAAO,kBAAkB;AACjH;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,4CAA4C;AAC5C;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzN2C;AACa;AACP;AAEjD,MAAM,WAAW,GAAG;IAClB,OAAO,EAAE,IAAI,qDAAO,CAAC;QACnB,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE,GAAG;KACnC,CAAC;CACH,CAAC;AAKF,IAAa,cAAc,sBAA3B,MAAa,cAAc;IAGvB,YAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAClC,eAAe,CAAC,IAAI;QAClB,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CAAC,gBAAc,CAAC,OAAO,GAAG,UAAU,EAAE,IAAI,EAAE,WAAW,CAAC;aAC5D,IAAI,CACH,0DAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAC5C,iEAAU,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;YACzB,MAAM,GAAG,IAAI,+CAA+C,CAAC;QAC/D,CAAC,CAAC,CACH,CAAC;IACN,CAAC;CACF;AAbe,sBAAO,GAAG,wBAAwB,CAAC;;YAEvB,kDAAI;;AAHrB,cAAc;IAJ1B,gEAAU,CAAC;QACR,UAAU,EAAE,MAAM;KACrB,CAAC;2EAK4B,kDAAI;GAHrB,cAAc,CAcxB;AAdwB;;;;;;;;;;;;;;;;;;;ACdI;;;;;;;;;;;;;;;;;;;;;ACAY;AAC6B;AACnC;AAErC,MAAM,WAAW,GAAG;IAClB,OAAO,EAAE,IAAI,qDAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;CAC7D,CAAC;AAGF,IAAa,WAAW,mBAAxB,MAAa,WAAW;IAOpB,YAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAI,CAAC;IANnC,iBAAiB;QACf,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAKD,eAAe,CAAC,IAAI;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAW,CAAC,OAAO,GAAC,YAAY,EAAC,IAAI,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC9H,CAAC;IACD,iBAAiB,CAAC,EAAE,EAAC,IAAI;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAW,CAAC,OAAO,GAAC,aAAa,GAAC,EAAE,EAAC,IAAI,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACjI,CAAC;IAED,cAAc,CAAC,EAAE,GAAG,IAAI;QACtB,IAAI,OAAO,GAAG,aAAW,CAAC,OAAO,GAAC,YAAY,CAAC;QAC/C,IAAG,EAAE,IAAE,IAAI,EAAC;YACV,OAAO,IAAI,GAAG,GAAG,EAAE,CAAC;SACrB;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/F,CAAC;IAED,UAAU,CAAC,EAAE;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAW,CAAC,OAAO,GAAC,aAAa,GAAC,EAAE,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAErH,CAAC;CACF;AAtBiB,mBAAO,GAAG,wBAAwB,CAAC;;YAEvB,kDAAI;;AAPrB,WAAW;IADvB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;2EAQL,kDAAI;GAPrB,WAAW,CA2BvB;AA3BuB;;;;;;;;;;;;;;;;;;;;;;;ACTiB;AACc;AACsB;AACN;AACkB;AACiD;AAG1I,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,yFAAoB,EAAE;IACzD,EAAE,IAAI,EAAE,mCAAmC,EAAE,SAAS,EAAE,sJAAuC,EAAE;IACjG,EAAE,IAAI,EAAE,kBAAkB,EAAC,SAAS,EAAE,qGAAwB,EAAE;IAChE,EAAE,IAAI,EAAE,YAAY,EAAC,SAAS,EAAE,mFAAkB,EAAE;IACpD,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE;CAC3C,CAAC;AAMF,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;CAAI;AAApB,gBAAgB;IAJ5B,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,gBAAgB,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;ACpBa;AACD;AAKzC,IAAa,YAAY,GAAzB,MAAa,YAAY;IAEvB,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QADlC,UAAK,GAAG,YAAY,CAAC;IACiB,CAAC;IACvC,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC5C,CAAC;IACD,gBAAgB;QACd,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mCAAmC,CAAC,CAAC;IACjE,CAAC;IACD,eAAe;QACb,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;IAChD,CAAC;IACD,aAAa;QACX,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;CACF;;YAb6B,sDAAM;;AAFvB,YAAY;IAJxB,+DAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,yMAAmC;KACpC,CAAC;2EAG4B,sDAAM;GAFvB,YAAY,CAexB;AAfwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNiC;AACjB;AAEe;AACT;AACwB;AACM;AACX;AACvB;AAC+F;AACjD;AACjC,CAAC,gBAAgB;AACjB;AA4BxD,IAAa,SAAS,GAAtB,MAAa,SAAS;CAAI;AAAb,SAAS;IA1BrB,8DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,2DAAY;YACZ,mFAAkB;YAClB,yFAAoB;YACpB,sJAAuC;YACvC,sGAAwB;SAEzB;QACD,OAAO,EAAE;YACP,uEAAa;YACb,oEAAgB;YAChB,0DAAW;YACX,kEAAmB;YACnB,wDAAU;YACV,sEAAe;YACf,sEAAgB;SACjB;QACD,OAAO,EAAE,CAAC,sGAAwB;YAChC,sJAAuC;YACvC,mFAAkB;YAClB,yFAAoB;SACrB;QACD,SAAS,EAAE,EAAE;QACb,SAAS,EAAE,CAAC,2DAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;ACxCkD;AACJ;AACR;AACrD,MAAM,OAAO;IAClB,YACS,SAAiB,EACjB,QAAgB,EAChB,WAAmB,EACnB,KAAa,EACb,OAAe;QAJf,cAAS,GAAT,SAAS,CAAQ;QACjB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,gBAAW,GAAX,WAAW,CAAQ;QACnB,UAAK,GAAL,KAAK,CAAQ;QACb,YAAO,GAAP,OAAO,CAAQ;IACpB,CAAC;CACN;AAKD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAI7B,YAAoB,EAAe,EACvB,cAA8B;QADtB,OAAE,GAAF,EAAE,CAAa;QACvB,mBAAc,GAAd,cAAc,CAAgB;QAJhC,gBAAW,GAAG,IAAI,0DAAY,EAAW,CAAC;QAE7C,QAAG,GAAQ,EAAE,CAAC;IAGf,CAAC;IAGP,QAAQ;QACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrC,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACxC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;YACtE,OAAO,EAAC,CAAC,EAAE,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACnC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,GAAG,qBAAQ,IAAI,CAAC,WAAW,CAAC,KAAK,EAAK,IAAI,CAAC,GAAG,CAAE,CAAC;QACtD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QACvB,OAAO,CAAC,GAAG,CACT,2DAA2D,EAC3D,IAAI,CAAC,WAAW,CAAC,KAAK,CACvB,CAAC;QAEF,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,OAAO,EAAE;YAIvC,MAAM,eAAe,GAAG,IAAI,OAAO,CACjC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,EAChC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAC/B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAClC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAC/B,CAAC;YAEF,IAAI,CAAC,WAAW,CAAC,IAAI,CACnB,eAAe,CAChB,CAAC;YAEF,IAAI,CAAC,cAAc;iBAChB,eAAe,CAAC;gBACf,SAAS,EAAE,eAAe,CAAC,SAAS;gBACpC,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,WAAW,EAAE,eAAe,CAAC,WAAW;gBACxC,KAAK,EAAE,eAAe,CAAC,KAAK;gBAC5B,OAAO,EAAE,eAAe,CAAC,OAAO;aAEjC,CAAC;iBACD,SAAS,CACR,CAAC,MAAM,EAAE,EAAE,CAAC,KAAK,CAAC,6BAA6B,CAAC,EAChD,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,iCAAiC,CAAC,CACpD;SAIN;IACH,CAAC;CACA;;YAzDyB,0DAAW;YACP,wEAAc;;AAJhC;IAAT,4DAAM,EAAE;;uDAA2C;AADzC,kBAAkB;IAJ9B,+DAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,kOAA0C;KAC3C,CAAC;2EAKwB,0DAAW;QACP,wEAAc;GAL/B,kBAAkB,CA6D9B;AA7D8B;;;;;;;;;;;;;;;;;;;AChBmB;AACT;AAKzC,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAE/B,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEvC,QAAQ;IACR,CAAC;IAED,OAAO;QACL,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,4BAA4B,CAAC,CAAC;IAC1D,CAAC;CAEF;;YAT6B,sDAAM;;AAFvB,oBAAoB;IAJhC,+DAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;QAC5B,wOAA4C;KAC7C,CAAC;2EAG4B,sDAAM;GAFvB,oBAAoB,CAWhC;AAXgC;;;;;;;;;;;;;;;;;;;;;ACN+C;AAMxD;AACoB;AAM5C,IAAa,OAAO,GAApB,MAAa,OAAO;IAClB,YACS,SAAiB,EACjB,QAAgB,EAChB,GAAW,EACX,WAAmB,EACnB,KAAa,EACb,aAAqB,EACrB,IAAY,EACZ,KAAa,EACb,OAAe,EACf,OAAe,EACf,iBAAyB,EACzB,eAAuB,EACvB,QAAgB,EAChB,GAAW,EACX,KAAa;QAdb,cAAS,GAAT,SAAS,CAAQ;QACjB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,QAAG,GAAH,GAAG,CAAQ;QACX,gBAAW,GAAX,WAAW,CAAQ;QACnB,UAAK,GAAL,KAAK,CAAQ;QACb,kBAAa,GAAb,aAAa,CAAQ;QACrB,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAQ;QACb,YAAO,GAAP,OAAO,CAAQ;QACf,YAAO,GAAP,OAAO,CAAQ;QACf,sBAAiB,GAAjB,iBAAiB,CAAQ;QACzB,oBAAe,GAAf,eAAe,CAAQ;QACvB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,QAAG,GAAH,GAAG,CAAQ;QACX,UAAK,GAAL,KAAK,CAAQ;IAGnB,CAAC;CACL;;;;;;;;;;;;;;;;;;AApBY,OAAO;IAJnB,+DAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;KAC3B,CAAC;;GAEW,OAAO,CAoBnB;AApBmB;AA0BpB,IAAa,uCAAuC,GAApD,MAAa,uCAAuC;IAOlD,YACU,WAAwB,EACxB,WAAwB,EACxB,gBAA4B;QAF5B,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,qBAAgB,GAAhB,gBAAgB,CAAY;QARtC,yBAAoB,GAAW,WAAW,CAAC;QAC3C,oBAAe,GAAW,0CAA0C,CAAC;QACrE,qBAAgB,GAAW,QAAQ,CAAC;IAOjC,CAAC;IAEJ,QAAQ;QAEN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACxC,SAAS,EAAE;gBACT,IAAI;gBACJ;oBACA,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC;iBAC5C;aACF;YACD,QAAQ,EAAE;gBACR,IAAI;gBACJ;oBACA,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC;iBAC5C;aACF;YACD,KAAK,EAAC;gBACJ,IAAI;gBACJ;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,KAAK;oBAChB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC;iBACzC;aACF;YACD,GAAG,EAAE;gBACH,IAAI,EAAE;oBACJ,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAC,yDAAU,CAAC,GAAG,CAAC,EAAE,CAAC;iBAC3D;aACF;YACD,WAAW,EAAC;gBACV,IAAI;gBACJ;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC;oBACzC,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;iBACzB;aACF;YACD,aAAa,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC1C,OAAO,EAAC;gBACN,IAAI;gBACJ;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC;iBAC1C;aACF;YACD,IAAI,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACjC,KAAK,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAClC,OAAO,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAClF,GAAG,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,iBAAiB,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC9C,QAAQ,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrC,KAAK,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAGnC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAE9C,CAAC;IACI,kBAAkB;IAEzB,CAAC;IAIC,QAAQ;QACN,eAAe;QAEf,IAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAC;YAGzB,IAAI,CAAC,WAAW;iBACd,eAAe,CACd,IAAI,OAAO,CACT,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,EAChC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EACrC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAC1B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAClC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,EACpC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAC3B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAC9B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAC9B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,iBAAiB,EACxC,KAAK,EACL,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAC/B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAC1B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAC7B,CACF;iBACA,SAAS,CACR,CAAC,GAAG,EAAE,EAAE;gBACN,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC9B,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;gBACN,KAAK,CAAC,kCAAkC,CAAC,CAAC;YAC5C,CAAC,CACF,CAAC;SAGL;aACG;YACF,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAC5B;IACH,CAAC;CAAC;;YAjHuB,sDAAW;YACX,0DAAW;YACN,wDAAU;;AAJ7B;IAAR,2DAAK,EAAE;;6EAA8B;AAN3B,uCAAuC;IAJnD,+DAAS,CAAC;QACT,QAAQ,EAAE,uCAAuC;QACjD,uSAAiE;KAClE,CAAC;2EASuB,sDAAW;QACX,0DAAW;QACN,wDAAU;GAV3B,uCAAuC,CAyHlD;AAzHkD;;;;;;;;;;;;;;;;;;;;;ACvCF;AACN;AAMpB;AACgF;AAQxG,IAAa,wBAAwB;AADrC,kDAAkD;AAClD,MAAa,wBAAwB;IAInC,YAAoB,WAAwB,EAAU,WAAwB;QAA1D,gBAAW,GAAX,WAAW,CAAa;QAAU,gBAAW,GAAX,WAAW,CAAa;QAH9E,aAAQ,GAAW,IAAI,CAAC;QAExB,iBAAY,GAAY,KAAK,CAAC;QAG9B,yBAAoB,GAAW,WAAW,CAAC;QAC3C,oBAAe,GAAW,0CAA0C,CAAC;QACrE,qBAAgB,GAAW,QAAQ,CAAC;IAJ8C,CAAC;IAOnF,QAAQ;QAEN,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC1C,SAAS,EAAE;gBACT,IAAI;gBACJ;oBACA,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC;iBAC5C;aACF;YACD,QAAQ,EAAE;gBACR,IAAI;gBACJ;oBACA,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC;iBAC5C;aACF;YACD,KAAK,EAAC;gBACJ,IAAI;gBACJ;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,KAAK;oBAChB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC;iBACzC;aACF;YACD,GAAG,EAAE;gBACH,IAAI,EAAE;oBACJ,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAC,yDAAU,CAAC,GAAG,CAAC,EAAE,CAAC;iBAC3D;aACF;YACD,WAAW,EAAC;gBACV,IAAI;gBACJ;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC;oBACzC,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;iBACzB;aACF;YACD,aAAa,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC1C,OAAO,EAAC;gBACN,IAAI;gBACJ;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC;iBAC1C;aACF;YACD,IAAI,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACjC,KAAK,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAClC,OAAO,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,EAAC,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAClF,GAAG,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,iBAAiB,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC9C,eAAe,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC5C,QAAQ,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrC,KAAK,EAAC,CAAC,IAAI,EAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAGnC,CAAC,CAAC;IACL,CAAC;IAGF,eAAe,CAAC,EAAE;QAEjB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,SAAS,CAC7C,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAAA,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,EAAE;QAAA,CAAC,EACjD,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,yBAAyB,CAAC,CACxC,CAAC;IAIH,CAAC;IACD,aAAa,CAAC,MAAM;QACnB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;YACxB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,WAAW,EAAE,MAAM,CAAC,WAAW;YAC/B,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,aAAa,EAAE,MAAM,CAAC,aAAa;YACnC,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;YAC3C,eAAe,EAAE,MAAM,CAAC,eAAe;YACvC,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,KAAK,EAAE,MAAM,CAAC,KAAK;SAEpB,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;IAC9B,CAAC;IAED,eAAe;QACd,IAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAC;YAGxB,IAAI,CAAC,WAAW;iBACd,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAC9B,IAAI,sHAAO,CACT,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,EAChC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAC/B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAC1B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAClC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,EACpC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAC3B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAC9B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAC9B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,iBAAiB,EACxC,KAAK,EACL,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAC/B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAC1B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAC7B,CACF;iBACA,SAAS,CACR,CAAC,GAAG,EAAE,EAAE;gBACN,KAAK,CAAC,qBAAqB,CAAC,CAAC;gBAC7B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,EACD,CAAC,GAAG,EAAE,EAAE;gBACN,KAAK,CAAC,mCAAmC,CAAC,CAAC;YAC7C,CAAC,CACF,CAAC;SAGL;aACG;YACF,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAC5B;IACF,CAAC;IAEC,WAAW,CAAC,IAAI;QACd,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAExB,CAAC;IACD,UAAU;QACT,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,SAAS,CACxC,CAAC,CAAC,EAAE,EAAE,CAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAC3B,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAExB;IACH,CAAC;IAED,aAAa,CAAC,EAAE;QACd,MAAM,aAAa,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;QACrD,IAAG,aAAa,EAChB;YACA,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,SAAS,CACvC,CAAC,CAAC,EAAC,EAAE,GAAE,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAC,EACzD,CAAC,GAAG,EAAC,EAAE,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAC9D;SACA;IACH,CAAC;CACF;;YA1KkC,sDAAW;YAAuB,0DAAW;;AAJnE,wBAAwB;IANpC,+DAAS,CAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,oPAAgD;KACjD,CAAC;IAEF,kDAAkD;;2EAKf,sDAAW,EAAuB,0DAAW;GAJnE,wBAAwB,CA8KpC;AA9KoC;;;;;;;;;;;;;AChBrC;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;ACfpB;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<div class=\\\"container-fluid px-0 m-0\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n<div class=\\\"logo col-md-2\\\">\\r\\n\\r\\n    <span class=\\\"navbar-brand mb-0 h1\\\">\\r\\n    <img width=\\\"220\\\" src=\\\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS9IuIKAI-HB22yZPVGllaVx51GcxetrijiYPRQdyvjlejQNXnmiQ9VNxvNjcGQk5wIdiR1L-GK2522tMU9_u07dQ&usqp=CAU&ec=45690271\\\"/>\\r\\n    </span>\\r\\n</div>    \\r\\n<div class=\\\"col-md-6\\\">\\r\\n    \\r\\n    <h1 class=\\\"text-dark float-right display-3\\\">Fitness  App</h1>\\r\\n  \\r\\n</div>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n  \\r\\n<div class=\\\"col-md-12\\\">\\r\\n<nav class=\\\"navbar navbar-expand-md navbar-light bg-dark\\\">\\r\\n\\r\\n\\r\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarCollapse\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n</button>\\r\\n\\r\\n  \\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarCollapse\\\">\\r\\n      <ul class=\\\"navbar-nav mr-auto\\\" >\\r\\n\\r\\n        <li class=\\\"nav-item mx-2\\\">\\r\\n          <button class=\\\"btn btn-info\\\" (click)=\\\"landingpage()\\\">Home</button>\\r\\n        </li>\\r\\n\\r\\n        <li class=\\\"nav-item mx-2\\\">\\r\\n          <button class=\\\"btn btn-info\\\" (click)=\\\"placeAppointment()\\\">Place Appointment</button>\\r\\n        </li>\\r\\n\\r\\n        <li class=\\\"nav-item mx-2\\\"> \\r\\n         <button class=\\\"btn btn-info\\\" (click)=\\\"viewAppointment()\\\">View Appointment</button>\\r\\n        </li>\\r\\n\\r\\n        <li class=\\\"nav-item mx-2\\\"> \\r\\n          <button class=\\\"btn btn-info\\\" >Search Appointment</button>\\r\\n         </li>\\r\\n\\r\\n        <li class=\\\"nav-item mx-2\\\">\\r\\n          <button class=\\\"btn btn-info\\\" (click)=\\\"contactUspage()\\\">Contact Us</button>\\r\\n        </li>\\r\\n        \\r\\n      </ul>\\r\\n    </div>\\r\\n\\r\\n  \\r\\n</nav>\\r\\n</div>\\r\\n</div>\\r\\n</div>\\r\\n<div class=\\\"sidebar\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    \\r\\n  <div class=\\\" col-md-2\\\">\\r\\n  <div class=\\\"container h-100  py-5 px-5\\\">\\r\\n\\r\\n    <div class=\\\"btn-group-vertical\\\">\\r\\n         \\r\\n      <button  class=\\\"btn btn-secondary btn-block\\\" (click)=\\\"landingpage()\\\">Home</button><br>\\r\\n    \\r\\n  \\r\\n      <button  class=\\\"btn btn-secondary btn-block\\\" (click)=\\\"placeAppointment()\\\">Place Appointment</button><br>\\r\\n    \\r\\n    \\r\\n      <button  class=\\\"btn btn-secondary btn-block\\\" (click)=\\\"viewAppointment()\\\">View Appointment</button><br>\\r\\n    \\r\\n      <button  class=\\\"btn btn-secondary btn-block\\\" >Search Appointment</button><br>\\r\\n    \\r\\n   \\r\\n      <button  class=\\\"btn btn-secondary btn-block\\\" (click)=\\\"contactUspage()\\\">Contact Us</button>\\r\\n  \\r\\n  </div>\\r\\n\\r\\n  \\r\\n</div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"col-12 col-sm-10\\\">\\r\\n<router-outlet></router-outlet>\\r\\n\\r\\n</div>\\r\\n  \\r\\n</div>\\r\\n \\r\\n</div>\"","export default \"<div class=\\\"container-fluid\\\">\\r\\n<form [formGroup]=\\\"contactForm\\\" (ngSubmit)=\\\"onSubmit()\\\" novalidate>\\r\\n    <label class=\\\"display-4\\\">Contact-Us</label>\\r\\n    <div class=\\\"row\\\">\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n        <label for=\\\"exampleInputfirstname\\\">First Name</label>\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"firstname\\\" placeholder=\\\"First Name\\\">\\r\\n        <small class=\\\"form-text text-muted\\\"\\r\\n            *ngIf=\\\"contactForm.controls.firstname.touched && contactForm.controls.firstname.errors?.required\\\">\\r\\n            Please enter first name.!\\r\\n        </small>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n        <label for=\\\"exampleInputlastname\\\">Last Name</label>\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"lastname\\\" placeholder=\\\"Last Name\\\">\\r\\n        <small class=\\\"form-text text-muted\\\"\\r\\n            *ngIf=\\\"contactForm.controls.lastname.touched && contactForm.controls.lastname.errors?.required\\\">\\r\\n            Please enter last name.!\\r\\n        </small>\\r\\n    </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n    <div class=\\\"form-group col-md-8\\\">\\r\\n        <label for=\\\"exampleInputphonenumber\\\">Phone Number</label>\\r\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"phonenumber\\\" placeholder=\\\"Phone Number\\\">\\r\\n        <small class=\\\"form-text text-muted\\\"\\r\\n            *ngIf=\\\"contactForm.controls.phonenumber.touched && contactForm.controls.phonenumber.errors?.required\\\">\\r\\n            Please enter phone number.!\\r\\n        </small>\\r\\n    </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\"> \\r\\n    <div class=\\\"form-group col-md-8\\\">\\r\\n        <label for=\\\"exampleInputemail\\\">Email</label>\\r\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"Eamil\\\">\\r\\n        <small class=\\\"form-text text-muted\\\"\\r\\n            *ngIf=\\\"contactForm.controls.email.touched && contactForm.controls.email.errors?.required\\\">\\r\\n            Please enter email.!\\r\\n        </small>\\r\\n        <small class=\\\"form-text text-muted\\\"\\r\\n            *ngIf=\\\"contactForm.controls.email.touched && contactForm.controls.email.errors?.email\\\">\\r\\n            Enter the valid email .!\\r\\n        </small>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"form-group col-md-8\\\">\\r\\n        <label for=\\\"exampleInputmessage\\\">Message</label>\\r\\n        <textarea type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"message\\\" placeholder=\\\"Message\\\"></textarea>\\r\\n        <small class=\\\"form-text text-muted\\\"\\r\\n            *ngIf=\\\"contactForm.controls.message.touched && contactForm.controls.message.errors?.required\\\">\\r\\n            Please enter message...!\\r\\n        </small>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\"> \\r\\n<div class=\\\"col-md-12\\\">\\r\\n<button type=\\\"submit\\\" class=\\\"btn btn-primary btn-block col-md-8\\\" >Submit</button>\\r\\n</div>\\r\\n</div>\\r\\n</form>\\r\\n</div>\"","export default \"<div class=\\\"introtext\\\">\\r\\n    <h1 class=\\\"display-3\\\">Intro text</h1>\\r\\n    <h3 class=\\\"display-5\\\">Fitness trainer website that allows the user to place appointment while entering your personal details , view and delete your fitness appointment with the instructor. and you can edit the appointment also. </h3>\\r\\n</div>\\r\\n<div>\\r\\n    <button class=\\\"btn btn-primary btn-lg\\\" (click)=\\\"navpage()\\\">Apply For Trainer</button>\\r\\n</div>\"","export default \"<div class=\\\"container m-5\\\">\\r\\n  \\r\\n  <form\\r\\n    name=\\\"fitnessForm\\\"\\r\\n    (ngSubmit)=\\\"onSubmit()\\\"\\r\\n    [formGroup]=\\\"fitnessForm\\\"\\r\\n  >\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n      <label for=\\\"first_name\\\">First Name</label>\\r\\n      <input\\r\\n        type=\\\"text\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"firstname\\\"\\r\\n        id=\\\"first_name\\\"\\r\\n        [ngClass]=\\\"{\\r\\n          'is-invalid':\\r\\n            fitnessForm.get('firstname').touched &&\\r\\n            fitnessForm.get('firstname').invalid\\r\\n        }\\\"\\r\\n        autofocus\\r\\n      />\\r\\n\\r\\n      <div\\r\\n        *ngIf=\\\"\\r\\n          fitnessForm.get('firstname').touched &&\\r\\n          fitnessForm.get('firstname').invalid\\r\\n        \\\"\\r\\n        class=\\\"invalid-feedback\\\"\\r\\n      >\\r\\n        <div *ngIf=\\\"fitnessForm.get('firstname').errors.required\\\">\\r\\n          First Name is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"fitnessForm.get('firstname').errors?.pattern\\\">\\r\\n          First Name should not contain number or symbol\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    \\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n      <label for=\\\"last_name\\\">Last Name</label>\\r\\n      <input\\r\\n        type=\\\"text\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"lastname\\\"\\r\\n        id=\\\"last_name\\\"\\r\\n        [ngClass]=\\\"{\\r\\n          'is-invalid':\\r\\n            fitnessForm.get('lastname').touched &&\\r\\n            fitnessForm.get('lastname').invalid\\r\\n        }\\\"\\r\\n      />\\r\\n\\r\\n      <div\\r\\n        *ngIf=\\\"\\r\\n          fitnessForm.get('lastname').touched &&\\r\\n          fitnessForm.get('lastname').invalid\\r\\n        \\\"\\r\\n        class=\\\"invalid-feedback\\\"\\r\\n      >\\r\\n        <div *ngIf=\\\"fitnessForm.get('lastname').errors.required\\\">\\r\\n          Last Name is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"fitnessForm.get('lastname').errors?.pattern\\\">\\r\\n          Last Name should not contain number or symbol\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n  \\r\\n    <div class=\\\"form-group col-md-8\\\">\\r\\n      <label for=\\\"email\\\">Email</label>\\r\\n      <input\\r\\n        type=\\\"text\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"email\\\"\\r\\n        id=\\\"email\\\"\\r\\n        [ngClass]=\\\"{\\r\\n          'is-invalid':\\r\\n            fitnessForm.get('email').touched &&\\r\\n            fitnessForm.get('email').invalid\\r\\n        }\\\"\\r\\n      />\\r\\n\\r\\n      <div\\r\\n        *ngIf=\\\"\\r\\n          fitnessForm.get('email').touched &&\\r\\n          fitnessForm.get('email').invalid\\r\\n        \\\"\\r\\n        class=\\\"invalid-feedback\\\"\\r\\n      >\\r\\n        <div *ngIf=\\\"fitnessForm.get('email').errors.required\\\">\\r\\n          Email is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"fitnessForm.get('email').errors?.pattern\\\">\\r\\n          Email is invalid \\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <small id=\\\"first_name_help\\\" class=\\\"form-text text-muted\\\"\\r\\n      >We'll never share your email with anyone else.</small\\r\\n    >\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n      <label for=\\\"phonenumber\\\">Phone number</label>\\r\\n      <input\\r\\n        type=\\\"tel\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"phonenumber\\\"\\r\\n        id=\\\"phonenumber\\\"\\r\\n        [ngClass]=\\\"{\\r\\n          'is-invalid':\\r\\n            fitnessForm.get('phonenumber').touched &&\\r\\n            fitnessForm.get('phonenumber').invalid\\r\\n        }\\\"\\r\\n      />\\r\\n\\r\\n      <div\\r\\n        *ngIf=\\\"\\r\\n          fitnessForm.get('phonenumber').touched &&\\r\\n          fitnessForm.get('phonenumber').invalid\\r\\n        \\\"\\r\\n        class=\\\"invalid-feedback\\\"\\r\\n      >\\r\\n        <div *ngIf=\\\"fitnessForm.get('phonenumber').errors.required\\\">\\r\\n          Phone number is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"fitnessForm.get('phonenumber').errors?.pattern\\\">\\r\\n          Phone number should only contain number\\r\\n        </div>\\r\\n        <div *ngIf=\\\"fitnessForm.get('phonenumber').errors?.min\\\">\\r\\n          Phone number should contain minimum 10 numbers\\r\\n        </div>\\r\\n        <div *ngIf=\\\"fitnessForm.get('phonenumber').errors?.max\\\">\\r\\n          Phone number should contain maximum 10 numbers\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group col-md-2\\\">\\r\\n      <label for=\\\"age\\\">Age </label>\\r\\n      <input\\r\\n        type=\\\"number\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"age\\\"\\r\\n        id=\\\"age\\\"\\r\\n        [ngClass]=\\\"{\\r\\n          'is-invalid':\\r\\n            fitnessForm.get('age').touched &&\\r\\n            fitnessForm.get('age').invalid\\r\\n        }\\\"\\r\\n      />\\r\\n\\r\\n      <div\\r\\n        *ngIf=\\\"\\r\\n          fitnessForm.get('age').touched &&\\r\\n          fitnessForm.get('age').invalid\\r\\n        \\\"\\r\\n        class=\\\"invalid-feedback\\\"\\r\\n      >\\r\\n        <div *ngIf=\\\"fitnessForm.get('age').errors.required\\\">\\r\\n          Age is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"fitnessForm.get('age').errors?.pattern\\\">\\r\\n          Age should only contain number\\r\\n        </div>\\r\\n        <div\\r\\n          *ngIf=\\\"\\r\\n            fitnessForm.get('age').errors?.min ||\\r\\n            fitnessForm.get('age').errors?.max\\r\\n          \\\"\\r\\n        >\\r\\n          Age must be between 19 to 59\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\"> \\r\\n\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n      <label for=\\\"trainer\\\">Trainer preference </label>\\r\\n\\r\\n      <select\\r\\n        class=\\\"cutom-select\\\"\\r\\n        formControlName=\\\"trainerpreference\\\"\\r\\n        id=\\\"trainer\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n      >\\r\\n        \\r\\n        <option value=\\\"male\\\" selected=\\\"true\\\">Male</option>\\r\\n        <option value=\\\"female\\\">Female</option>\\r\\n        <option value=\\\"other\\\">Other</option>\\r\\n      </select>\\r\\n    </div>\\r\\n\\r\\n \\r\\n\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n      <label for=\\\"packages\\\">Package </label>\\r\\n\\r\\n      <select\\r\\n        class=\\\"cutom-select\\\"\\r\\n        formControlName=\\\"packages\\\"\\r\\n        id=\\\"packages\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n      >\\r\\n        <option value=\\\"500\\\" selected=\\\"true\\\">Basic Package / 500rs </option>\\r\\n        <option value=\\\"1000\\\">Intermediate Package / 1000rs</option>\\r\\n        <option value=\\\"1500\\\">Advance Package / 2000rs</option>\\r\\n      </select>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n      <label for=\\\"inr\\\">INR </label>\\r\\n\\r\\n      <input\\r\\n        type=\\\"number\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"inr\\\"\\r\\n        id=\\\"inr\\\"\\r\\n        \\r\\n      />\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group col-md-4\\\">\\r\\n      <label for=\\\"paisa\\\">Paisa </label>\\r\\n\\r\\n      <input\\r\\n        type=\\\"number\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        formControlName=\\\"paisa\\\"\\r\\n        id=\\\"paisa\\\"\\r\\n        \\r\\n      />\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n    \\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"form-group col-md-8\\\">\\r\\n        <fieldset>\\r\\n            <legend>Address</legend>\\r\\n\\r\\n            <input\\r\\n                    type=\\\"text\\\"\\r\\n                    placeholder=\\\"Type address\\\"\\r\\n                    class=\\\"form-control\\\"\\r\\n                    formControlName=\\\"streetaddress\\\"\\r\\n                    [ngClass]=\\\"{\\r\\n                      'is-invalid':\\r\\n                        fitnessForm.get('streetaddress').touched &&\\r\\n                        fitnessForm.get('streetaddress').invalid\\r\\n                    }\\\"\\r\\n                  />\\r\\n\\r\\n        </fieldset>\\r\\n        \\r\\n        <div\\r\\n          *ngIf=\\\"\\r\\n            fitnessForm.get('streetaddress').touched &&\\r\\n            fitnessForm.get('streetaddress').invalid\\r\\n          \\\"\\r\\n          class=\\\"invalid-feedback\\\"\\r\\n        >\\r\\n          <div *ngIf=\\\"fitnessForm.get('streetaddress').errors.required\\\">\\r\\n            Address is required\\r\\n          </div>\\r\\n\\r\\n\\r\\n        </div>\\r\\n        \\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"form-group col-md-4\\\">\\r\\n        <label for=\\\"country\\\">Country </label>\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          formControlName=\\\"country\\\"\\r\\n          id=\\\"country\\\"\\r\\n          [ngClass]=\\\"{\\r\\n            'is-invalid':\\r\\n              fitnessForm.get('country').touched &&\\r\\n              fitnessForm.get('country').invalid\\r\\n          }\\\"\\r\\n        />\\r\\n  \\r\\n        <div\\r\\n          *ngIf=\\\"\\r\\n            fitnessForm.get('country').touched &&\\r\\n            fitnessForm.get('country').invalid\\r\\n          \\\"\\r\\n          class=\\\"invalid-feedback\\\"\\r\\n        >\\r\\n          <div *ngIf=\\\"fitnessForm.get('country').errors.required\\\">\\r\\n            country is required\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n  \\r\\n\\r\\n      <div class=\\\"form-group col-md-4\\\">\\r\\n        <label for=\\\"state\\\">State </label>\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          formControlName=\\\"state\\\"\\r\\n          id=\\\"state\\\"\\r\\n          [ngClass]=\\\"{\\r\\n            'is-invalid':\\r\\n              fitnessForm.get('state').touched &&\\r\\n              fitnessForm.get('state').invalid\\r\\n          }\\\"\\r\\n        />\\r\\n  \\r\\n        <div\\r\\n          *ngIf=\\\"\\r\\n            fitnessForm.get('state').touched &&\\r\\n            fitnessForm.get('state').invalid\\r\\n          \\\"\\r\\n          class=\\\"invalid-feedback\\\"\\r\\n        >\\r\\n          <div *ngIf=\\\"fitnessForm.get('state').errors.required\\\">\\r\\n            state is required\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n            <div class=\\\"form-group col-md-4\\\">\\r\\n        <label for=\\\"city\\\">City </label>\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          formControlName=\\\"city\\\"\\r\\n          id=\\\"city\\\"\\r\\n          [ngClass]=\\\"{\\r\\n            'is-invalid':\\r\\n              fitnessForm.get('city').touched &&\\r\\n              fitnessForm.get('city').invalid\\r\\n          }\\\"\\r\\n        />\\r\\n  \\r\\n        <div\\r\\n          *ngIf=\\\"\\r\\n            fitnessForm.get('city').touched &&\\r\\n            fitnessForm.get('city').invalid\\r\\n          \\\"\\r\\n          class=\\\"invalid-feedback\\\"\\r\\n        >\\r\\n          <div *ngIf=\\\"fitnessForm.get('city').errors.required\\\">\\r\\n            city is required\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n  \\r\\n      \\r\\n      <div class=\\\"form-group col-md-4\\\">\\r\\n        <label for=\\\"pincode\\\">Pincode </label>\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          formControlName=\\\"pincode\\\"\\r\\n          id=\\\"pincode\\\"\\r\\n          [ngClass]=\\\"{\\r\\n            'is-invalid':\\r\\n              fitnessForm.get('pincode').touched &&\\r\\n              fitnessForm.get('pincode').invalid\\r\\n          }\\\"\\r\\n        />\\r\\n  \\r\\n        <div\\r\\n          *ngIf=\\\"\\r\\n            fitnessForm.get('pincode').touched &&\\r\\n            fitnessForm.get('pincode').invalid\\r\\n          \\\"\\r\\n          class=\\\"invalid-feedback\\\"\\r\\n        >\\r\\n          <div *ngIf=\\\"fitnessForm.get('pincode').errors.required\\\">\\r\\n            pincode is required\\r\\n          </div>\\r\\n          <div *ngIf=\\\"fitnessForm.get('pincode').errors?.pattern\\\">\\r\\n            pincode is invalid\\r\\n          </div>\\r\\n          <div *ngIf=\\\"fitnessForm.get('pincode').errors?.min || fitnessForm.get('pincode').errors?.max\\\">\\r\\n            pincode must be of 6 numbers\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  \\r\\n\\r\\n    <!-- <div class=\\\"form-group\\\">\\r\\n            \\\"Ctrl+K, C\\\" or \\\"Ctrl+E, C\\\" \\r\\n\\r\\n            <label for=\\\"age\\\">Age</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"age\\\" >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"address\\\">Address</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"address\\\" >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"State\\\">State</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"State\\\" >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"City\\\">City</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"City\\\" >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"Pincode\\\">Pincode</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"Pincode\\\" >\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"phone no\\\">phone no:</label>\\r\\n            <input type=\\\"tel\\\" class=\\\"form-control\\\" id=\\\"phone no\\\" >\\r\\n        </div>\\r\\n\\r\\n        <div class='mt-2'>\\r\\n            \\r\\n            <label for=\\\"trainerPreference\\\"> Trainer Type</label>\\r\\n            <select class=\\\"custom-select mr-sm-2\\\" id=\\\"trainerPreference\\\">\\r\\n                <option selected>Trainer preference</option>\\r\\n                <option value=\\\"Male\\\">Male</option>\\r\\n                <option value=\\\"Female\\\">Female</option>\\r\\n              </select>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div class='mt-2'>\\r\\n            <label for=\\\"package\\\"> Package Type</label>\\r\\n            <select class=\\\"custom-select mr-sm-2\\\" id=\\\"package\\\">\\r\\n                <option selected>Trainer preference</option>\\r\\n                <option value=\\\"15k\\\">15K per month (Bodybuilding) </option>\\r\\n                <option value=\\\"30k\\\">30K per month (Bodybuilding + yoga)</option>\\r\\n                <option value=\\\"30k\\\">36K per month (Bodybuilding + yoga + swimming)</option>\\r\\n        \\r\\n              </select>\\r\\n\\r\\n        </div>\\r\\n        -->\\r\\n\\r\\n    <div class=\\\"mt-3\\\">\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-block col-md-8\\\">Submit</button>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\"","export default \"<div >\\r\\n    \\r\\n    <div class=\\\"container-fluid\\\">\\r\\n        <div class=\\\"table-responsive\\\">\\r\\n            <table class=\\\"table  \\\">\\r\\n                <thead class=\\\"thead\\\">\\r\\n                    <th class=\\\"h1\\\">Sl NO</th>\\r\\n                    <th class=\\\"h2\\\">Name</th>\\r\\n                    <th class=\\\"h3\\\">Address</th>\\r\\n                    <th class=\\\"h4\\\">City</th>\\r\\n                    <th class=\\\"h5\\\">Package</th>\\r\\n                    <th class=\\\"h6\\\">Trainer Preference</th>\\r\\n                    <th class=\\\"h7\\\">Phone</th>\\r\\n                \\r\\n                </thead>\\r\\n                <tbody>\\r\\n                <tr *ngFor = \\\"let row of tableData\\\">\\r\\n                    <td>\\r\\n                        {{ row.id }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        {{ row.firstname +\\\" \\\" + row.lastname }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        {{ row.streetaddress }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        {{ row.city }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        {{ row.packages }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        {{ row.trainerpreference }}\\r\\n                    </td>\\r\\n                    <td>\\r\\n                        {{ row.phonenumber }}\\r\\n                    </td>\\r\\n\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"editAppointment(row.id)\\\">Edit</button>\\r\\n                        <button class=\\\"btn btn-primary btn-block\\\"  (click)=\\\"deletefitness(row.id)\\\">Delete</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                </tbody>\\r\\n            </table>\\r\\n            \\r\\n        </div>\\r\\n   \\r\\n\\r\\n    \\r\\n    <div  *ngIf = \\\"showEditForm\\\"  class=\\\"container m-4\\\">\\r\\n\\r\\n      <div class=\\\"display-3 my-4\\\">Edit Appointment</div>\\r\\n        <form\\r\\n        name=\\\"fitnessForm\\\"\\r\\n        \\r\\n        [formGroup]=\\\"fitnessForm\\\"\\r\\n      >\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"form-group col-md-4\\\">\\r\\n          <label for=\\\"first_name\\\">First Name</label>\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"firstname\\\"\\r\\n            id=\\\"first_name\\\"\\r\\n            [ngClass]=\\\"{\\r\\n              'is-invalid':\\r\\n                fitnessForm.get('firstname').touched &&\\r\\n                fitnessForm.get('firstname').invalid\\r\\n            }\\\"\\r\\n            \\r\\n            autofocus\\r\\n          />\\r\\n    \\r\\n          <div\\r\\n            *ngIf=\\\"\\r\\n              fitnessForm.get('firstname').touched &&\\r\\n              fitnessForm.get('firstname').invalid\\r\\n            \\\"\\r\\n            class=\\\"invalid-feedback\\\"\\r\\n          >\\r\\n            <div *ngIf=\\\"fitnessForm.get('firstname').errors.required\\\">\\r\\n              First Name is required\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fitnessForm.get('firstname').errors?.pattern\\\">\\r\\n              First Name should not contain number or symbol\\r\\n            </div>\\r\\n          </div>\\r\\n    \\r\\n        \\r\\n        </div>\\r\\n    \\r\\n        <div class=\\\"form-group col-md-4\\\">\\r\\n          <label for=\\\"last_name\\\">Last Name</label>\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"lastname\\\"\\r\\n            id=\\\"last_name\\\"\\r\\n            [ngClass]=\\\"{\\r\\n              'is-invalid':\\r\\n                fitnessForm.get('lastname').touched &&\\r\\n                fitnessForm.get('lastname').invalid\\r\\n            }\\\"\\r\\n          />\\r\\n    \\r\\n          <div\\r\\n            *ngIf=\\\"\\r\\n              fitnessForm.get('lastname').touched &&\\r\\n              fitnessForm.get('lastname').invalid\\r\\n            \\\"\\r\\n            class=\\\"invalid-feedback\\\"\\r\\n          >\\r\\n            <div *ngIf=\\\"fitnessForm.get('lastname').errors.required\\\">\\r\\n              Last Name is required\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fitnessForm.get('lastname').errors?.pattern\\\">\\r\\n              Last Name should not contain number or symbol\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    \\r\\n      <div class=\\\"row\\\">\\r\\n      \\r\\n        <div class=\\\"form-group col-md-8\\\">\\r\\n          <label for=\\\"email\\\">Email</label>\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"email\\\"\\r\\n            id=\\\"email\\\"\\r\\n            [ngClass]=\\\"{\\r\\n              'is-invalid':\\r\\n                fitnessForm.get('email').touched &&\\r\\n                fitnessForm.get('email').invalid\\r\\n            }\\\"\\r\\n          />\\r\\n    \\r\\n          <div\\r\\n            *ngIf=\\\"\\r\\n              fitnessForm.get('email').touched &&\\r\\n              fitnessForm.get('email').invalid\\r\\n            \\\"\\r\\n            class=\\\"invalid-feedback\\\"\\r\\n          >\\r\\n            <div *ngIf=\\\"fitnessForm.get('email').errors.required\\\">\\r\\n              Email is required\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fitnessForm.get('email').errors?.pattern\\\">\\r\\n              Email is invalid \\r\\n            </div>\\r\\n          </div>\\r\\n    \\r\\n          <small id=\\\"first_name_help\\\" class=\\\"form-text text-muted\\\"\\r\\n          >We'll never share your email with anyone else.</small\\r\\n        >\\r\\n        </div>\\r\\n      </div>\\r\\n    \\r\\n      <div class=\\\"row\\\">\\r\\n    \\r\\n        <div class=\\\"form-group col-md-4\\\">\\r\\n          <label for=\\\"phonenumber\\\">Phone number </label>\\r\\n          <input\\r\\n            type=\\\"tel\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"phonenumber\\\"\\r\\n            id=\\\"phonenumber\\\"\\r\\n            [ngClass]=\\\"{\\r\\n              'is-invalid':\\r\\n                fitnessForm.get('phonenumber').touched &&\\r\\n                fitnessForm.get('phonenumber').invalid\\r\\n            }\\\"\\r\\n          />\\r\\n    \\r\\n          <div\\r\\n            *ngIf=\\\"\\r\\n              fitnessForm.get('phonenumber').touched &&\\r\\n              fitnessForm.get('phonenumber').invalid\\r\\n            \\\"\\r\\n            class=\\\"invalid-feedback\\\"\\r\\n          >\\r\\n            <div *ngIf=\\\"fitnessForm.get('phonenumber').errors.required\\\">\\r\\n              Phone number is required\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fitnessForm.get('phonenumber').errors?.pattern\\\">\\r\\n              Phone number should only contain number\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fitnessForm.get('phonenumber').errors?.min\\\">\\r\\n              Phone number should contain minimum 10 numbers\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fitnessForm.get('phonenumber').errors?.max\\\">\\r\\n              Phone number should contain maximum 10 numbers\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n    \\r\\n        <div class=\\\"form-group col-md-2\\\">\\r\\n          <label for=\\\"age\\\">Age </label>\\r\\n          <input\\r\\n            type=\\\"number\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"age\\\"\\r\\n            id=\\\"age\\\"\\r\\n            [ngClass]=\\\"{\\r\\n              'is-invalid':\\r\\n                fitnessForm.get('age').touched &&\\r\\n                fitnessForm.get('age').invalid\\r\\n            }\\\"\\r\\n          />\\r\\n    \\r\\n          <div\\r\\n            *ngIf=\\\"\\r\\n              fitnessForm.get('age').touched &&\\r\\n              fitnessForm.get('age').invalid\\r\\n            \\\"\\r\\n            class=\\\"invalid-feedback\\\"\\r\\n          >\\r\\n            <div *ngIf=\\\"fitnessForm.get('age').errors.required\\\">\\r\\n              Age is required\\r\\n            </div>\\r\\n            <div *ngIf=\\\"fitnessForm.get('age').errors?.pattern\\\">\\r\\n              Age should only contain number\\r\\n            </div>\\r\\n            <div\\r\\n              *ngIf=\\\"\\r\\n                fitnessForm.get('age').errors?.min ||\\r\\n                fitnessForm.get('age').errors?.max\\r\\n              \\\"\\r\\n            >\\r\\n              Age must be between 19 to 59\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    \\r\\n      <div class=\\\"row\\\"> \\r\\n    \\r\\n        <div class=\\\"form-group col-md-4\\\">\\r\\n          <label for=\\\"trainer\\\">Trainer preference </label>\\r\\n    \\r\\n          <select\\r\\n            class=\\\"cutom-select\\\"\\r\\n            formControlName=\\\"trainerpreference\\\"\\r\\n            id=\\\"trainer\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n          >\\r\\n            <option value=\\\"male\\\">male</option>\\r\\n            <option value=\\\"female\\\">female</option>\\r\\n            <option value=\\\"other\\\">other</option>\\r\\n          </select>\\r\\n        </div>\\r\\n    \\r\\n     \\r\\n    \\r\\n        <div class=\\\"form-group col-md-4\\\">\\r\\n          <label for=\\\"packages\\\">Package </label>\\r\\n    \\r\\n          <select\\r\\n            class=\\\"cutom-select\\\"\\r\\n            formControlName=\\\"packages\\\"\\r\\n            id=\\\"packages\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n          >\\r\\n          <option value=\\\"500\\\" selected=\\\"true\\\">Basic Package / 500rs </option>\\r\\n          <option value=\\\"1000\\\">Intermediate Package / 1000rs</option>\\r\\n          <option value=\\\"1500\\\">Advance Package / 1500rs</option>\\r\\n          </select>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"form-group col-md-4\\\">\\r\\n          <label for=\\\"inr\\\">INR </label>\\r\\n    \\r\\n          <input\\r\\n            type=\\\"number\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"inr\\\"\\r\\n            id=\\\"inr\\\"\\r\\n            \\r\\n          />\\r\\n        </div>\\r\\n    \\r\\n        <div class=\\\"form-group col-md-4\\\">\\r\\n          <label for=\\\"paisa\\\">Paisa </label>\\r\\n    \\r\\n          <input\\r\\n            type=\\\"number\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"paisa\\\"\\r\\n            id=\\\"paisa\\\"\\r\\n            \\r\\n          />\\r\\n        </div>\\r\\n    \\r\\n      </div>\\r\\n    \\r\\n    \\r\\n        \\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"form-group col-md-8\\\">\\r\\n            <fieldset>\\r\\n                <legend>Address</legend>\\r\\n    \\r\\n                <input\\r\\n                        type=\\\"text\\\"\\r\\n                        placeholder=\\\"Type address\\\"\\r\\n                        class=\\\"form-control\\\"\\r\\n                        formControlName=\\\"streetaddress\\\"\\r\\n                        [ngClass]=\\\"{\\r\\n                          'is-invalid':\\r\\n                            fitnessForm.get('streetaddress').touched &&\\r\\n                            fitnessForm.get('streetaddress').invalid\\r\\n                        }\\\"\\r\\n                      />\\r\\n    \\r\\n            </fieldset>\\r\\n            \\r\\n            <div\\r\\n              *ngIf=\\\"\\r\\n                fitnessForm.get('streetaddress').touched &&\\r\\n                fitnessForm.get('streetaddress').invalid\\r\\n              \\\"\\r\\n              class=\\\"invalid-feedback\\\"\\r\\n            >\\r\\n              <div *ngIf=\\\"fitnessForm.get('streetaddress').errors.required\\\">\\r\\n                Address is required\\r\\n              </div>\\r\\n    \\r\\n    \\r\\n            </div>\\r\\n            \\r\\n          </div>\\r\\n        </div>\\r\\n    \\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"form-group col-md-4\\\">\\r\\n            <label for=\\\"country\\\">Country </label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              formControlName=\\\"country\\\"\\r\\n              id=\\\"country\\\"\\r\\n              [ngClass]=\\\"{\\r\\n                'is-invalid':\\r\\n                  fitnessForm.get('country').touched &&\\r\\n                  fitnessForm.get('country').invalid\\r\\n              }\\\"\\r\\n            />\\r\\n      \\r\\n            <div\\r\\n              *ngIf=\\\"\\r\\n                fitnessForm.get('country').touched &&\\r\\n                fitnessForm.get('country').invalid\\r\\n              \\\"\\r\\n              class=\\\"invalid-feedback\\\"\\r\\n            >\\r\\n              <div *ngIf=\\\"fitnessForm.get('country').errors.required\\\">\\r\\n                country is required\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n      \\r\\n    \\r\\n          <div class=\\\"form-group col-md-4\\\">\\r\\n            <label for=\\\"state\\\">State </label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              formControlName=\\\"state\\\"\\r\\n              id=\\\"state\\\"\\r\\n              [ngClass]=\\\"{\\r\\n                'is-invalid':\\r\\n                  fitnessForm.get('state').touched &&\\r\\n                  fitnessForm.get('state').invalid\\r\\n              }\\\"\\r\\n            />\\r\\n      \\r\\n            <div\\r\\n              *ngIf=\\\"\\r\\n                fitnessForm.get('state').touched &&\\r\\n                fitnessForm.get('state').invalid\\r\\n              \\\"\\r\\n              class=\\\"invalid-feedback\\\"\\r\\n            >\\r\\n              <div *ngIf=\\\"fitnessForm.get('state').errors.required\\\">\\r\\n                state is required\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n                <div class=\\\"form-group col-md-4\\\">\\r\\n            <label for=\\\"city\\\">City </label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              formControlName=\\\"city\\\"\\r\\n              id=\\\"city\\\"\\r\\n              [ngClass]=\\\"{\\r\\n                'is-invalid':\\r\\n                  fitnessForm.get('city').touched &&\\r\\n                  fitnessForm.get('city').invalid\\r\\n              }\\\"\\r\\n            />\\r\\n      \\r\\n            <div\\r\\n              *ngIf=\\\"\\r\\n                fitnessForm.get('city').touched &&\\r\\n                fitnessForm.get('city').invalid\\r\\n              \\\"\\r\\n              class=\\\"invalid-feedback\\\"\\r\\n            >\\r\\n              <div *ngIf=\\\"fitnessForm.get('city').errors.required\\\">\\r\\n                city is required\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n      \\r\\n          \\r\\n          <div class=\\\"form-group col-md-4\\\">\\r\\n            <label for=\\\"pincode\\\">Pincode </label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              formControlName=\\\"pincode\\\"\\r\\n              id=\\\"pincode\\\"\\r\\n              [ngClass]=\\\"{\\r\\n                'is-invalid':\\r\\n                  fitnessForm.get('pincode').touched &&\\r\\n                  fitnessForm.get('pincode').invalid\\r\\n              }\\\"\\r\\n            />\\r\\n      \\r\\n            <div\\r\\n              *ngIf=\\\"\\r\\n                fitnessForm.get('pincode').touched &&\\r\\n                fitnessForm.get('pincode').invalid\\r\\n              \\\"\\r\\n              class=\\\"invalid-feedback\\\"\\r\\n            >\\r\\n              <div *ngIf=\\\"fitnessForm.get('pincode').errors.required\\\">\\r\\n                pincode is required\\r\\n              </div>\\r\\n              <div *ngIf=\\\"fitnessForm.get('pincode').errors?.pattern\\\">\\r\\n                pincode is invalid\\r\\n              </div>\\r\\n              <div *ngIf=\\\"fitnessForm.get('pincode').errors?.min || fitnessForm.get('pincode').errors?.max\\\">\\r\\n                pincode must be of 6 numbers\\r\\n              </div>\\r\\n    \\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"mt-3\\\">\\r\\n            <button type=\\\"submit\\\" (click)=\\\"saveAppointment()\\\" class=\\\"btn btn-primary btn-block col-md-8\\\">Submit</button>\\r\\n          </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div> </div>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Response, Headers, Http } from \"@angular/http\";\r\nimport { map, catchError } from \"rxjs/operators\";\r\n\r\nconst httpOptions = {\r\n  headers: new Headers({\r\n    \"Content-Type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  }),\r\n};\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\n\r\nexport class ContactService {\r\n    public static BaseUrl = \"http://localhost:6565/\";\r\n   \r\n    constructor(private http: Http) {}\r\n    postcontactdata(data) {\r\n      return this.http\r\n        .post(ContactService.BaseUrl + \"contacts\", data, httpOptions)\r\n        .pipe(\r\n          map((response: Response) => response.json()),\r\n          catchError((err, caught) => {\r\n            throw err || \"Post request error in contact data submission\";\r\n          })\r\n        );\r\n    }\r\n  }","export * from './user.service';","import { Injectable } from '@angular/core';\r\nimport { Headers, Http, RequestOptions, Response } from \"@angular/http\";\r\nimport { map } from 'rxjs/operators';\r\n\r\nconst httpOptions = {\r\n  headers: new Headers({ \"Content-Type\": \"application/json\" })\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n    deletefitnessdata() {\r\n      throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public static BaseUrl = \"http://localhost:6565/\";\r\n\r\n    constructor(private http: Http) { }\r\n    postfitnessdata(data){\r\n      return this.http.post(UserService.BaseUrl+'allfriends',data,httpOptions).pipe(map((response: Response) => response.json()));\r\n    }\r\n    updatefitnessdata(id,data){\r\n      return this.http.put(UserService.BaseUrl+'allfriends/'+id,data,httpOptions).pipe(map((response: Response) => response.json()));\r\n    }\r\n\r\n    getfitnessdata(id = null) {\r\n      let baseURL = UserService.BaseUrl+'allfriends';\r\n      if(id!=null){\r\n        baseURL += \"/\" + id;\r\n      }\r\n      return this.http.get(baseURL,httpOptions).pipe(map((response: Response) => response.json()));\r\n    }\r\n   \r\n    deletedata(id){\r\n      return this.http.delete(UserService.BaseUrl+'allfriends/'+id).pipe(map((response: Response) => response.json()));\r\n  \r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LandingPageComponent } from './landing-page/landing-page.component';\r\nimport { ContactUsComponent } from './contact-us/contact-us.component';\r\nimport { ViewAppointmentComponent } from './view-appointment/view-appointment.component';\r\nimport { PlaceFitnessTrainerAppointmentComponent } from './place-fitness-trainer-appointment/place-fitness-trainer-appointment.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: \"landing-page\", component: LandingPageComponent },\r\n  { path: \"place-fitness-trainer-appointment\", component: PlaceFitnessTrainerAppointmentComponent },\r\n  { path: \"view-appointment\",component: ViewAppointmentComponent },\r\n  { path: \"contact-us\",component: ContactUsComponent },\r\n  { path: \"**\", redirectTo: \"landing-page\" }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { Router } from \"@angular/router\";\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'angularSPA';\r\n  constructor(private router: Router) { }\r\n  landingpage() {\r\n    this.router.navigateByUrl(\"landing-page\");\r\n  }\r\n  placeAppointment() {\r\n    this.router.navigateByUrl(\"place-fitness-trainer-appointment\");\r\n  }\r\n  viewAppointment() {\r\n    this.router.navigateByUrl(\"view-appointment\");\r\n  }\r\n  contactUspage() {\r\n    this.router.navigateByUrl(\"contact-us\");\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ContactUsComponent } from './contact-us/contact-us.component';\r\nimport { LandingPageComponent } from './landing-page/landing-page.component';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpModule } from '@angular/http';\r\nimport { PlaceFitnessTrainerAppointmentComponent } from './place-fitness-trainer-appointment/place-fitness-trainer-appointment.component';\r\nimport { ViewAppointmentComponent } from './view-appointment/view-appointment.component';\r\nimport { AutofocusModule } from 'angular-autofocus-fix'; // <--- new code\r\nimport { HttpClientModule } from '@angular/common/http';\r\n \r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ContactUsComponent,\r\n    LandingPageComponent,\r\n    PlaceFitnessTrainerAppointmentComponent,\r\n    ViewAppointmentComponent,\r\n    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpModule,\r\n    AutofocusModule,\r\n    HttpClientModule\r\n  ],\r\n  exports: [ViewAppointmentComponent,\r\n    PlaceFitnessTrainerAppointmentComponent,\r\n    ContactUsComponent,\r\n    LandingPageComponent\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport {ContactService} from \"../_services/contact.service\";\r\nexport class Contact {\r\n  constructor(\r\n    public firstname: string,\r\n    public lastname: string,\r\n    public phonenumber: number,\r\n    public email: string,\r\n    public message: string\r\n  ) { }\r\n}\r\n@Component({\r\n  selector: 'app-contact-us',\r\n  templateUrl: './contact-us.component.html'\r\n})\r\nexport class ContactUsComponent implements OnInit {\r\n  @Output() contactdata = new EventEmitter<Contact>();\r\n  contactForm: FormGroup;\r\n  public obj: any = {};\r\n  constructor(private fb: FormBuilder,\r\n      private contactService: ContactService,    \r\n    ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.contactForm = this.fb.group({\r\n      firstname: [\"\", [Validators.required]],\r\n      lastname: [\"\", [Validators.required]],\r\n      phonenumber: [\"\", [Validators.required]],\r\n      email: [\"\", [Validators.required,Validators.pattern(\"[^ @]*@[^ @]*\")]],\r\n      message:[\"\",[Validators.required]]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.obj = { ...this.contactForm.value, ...this.obj };\r\n    this.contactForm.value;\r\n    console.log(\r\n      \"LOG: LoginComponent -> onSubmit -> this.contactForm.value\",\r\n      this.contactForm.value\r\n    );\r\n\r\n    if (this.contactForm.status === \"VALID\") {\r\n\r\n\r\n\r\n      const contactFormData = new Contact(\r\n        this.contactForm.value.firstname,\r\n        this.contactForm.value.lastname,\r\n        this.contactForm.value.phonenumber,\r\n        this.contactForm.value.email,\r\n        this.contactForm.value.message\r\n      );\r\n        \r\n      this.contactdata.emit(\r\n        contactFormData\r\n      );\r\n\r\n      this.contactService\r\n        .postcontactdata({\r\n          firstname: contactFormData.firstname,\r\n          lastname: contactFormData.lastname,\r\n          phonenumber: contactFormData.phonenumber,\r\n          email: contactFormData.email,\r\n          message: contactFormData.message,\r\n\r\n        })\r\n        .subscribe(\r\n          (result) => alert(\"Contact us request raised !\"),\r\n          (error) => alert(\"Error while submitting the form\")\r\n        )\r\n\r\n\r\n\r\n  }\r\n}\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from \"@angular/router\";\r\n@Component({\r\n  selector: 'app-landing-page',\r\n  templateUrl: './landing-page.component.html'\r\n})\r\nexport class LandingPageComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  navpage() {\r\n    this.router.navigateByUrl(\"place-gift-card-order-page\");\r\n  }\r\n  \r\n}\r\n","import { Component, OnInit, Directive, ElementRef, Input } from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  Validators,\r\n  FormBuilder,\r\n} from \"@angular/forms\";\r\nimport { UserService } from \"../_services/\";\r\n\r\n@Directive({\r\n  selector: \"[appautoFocus]\"\r\n})\r\n\r\nexport class Fitness {\r\n  constructor(\r\n    public firstname: string,\r\n    public lastname: string,\r\n    public age: number,\r\n    public phonenumber: number,\r\n    public email: string,\r\n    public streetaddress: string,\r\n    public city: string,\r\n    public state: string,\r\n    public country: string,\r\n    public pincode: number,\r\n    public trainerpreference: string,\r\n    public physiotherapist: string,\r\n    public packages: string,\r\n    public inr: number,\r\n    public paisa: number,\r\n\r\n\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: \"app-place-fitness-trainer-appointment\",\r\n  templateUrl: \"./place-fitness-trainer-appointment.component.html\",\r\n})\r\nexport class PlaceFitnessTrainerAppointmentComponent implements OnInit {\r\n  \r\n  noNummbersValidation: string = \"[a-zA-Z]*\";\r\n  emailValidation: RegExp = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;\r\n  numberValidation: string = \"[0-9]*\";\r\n  fitnessForm: FormGroup;\r\n  @Input() public appAutoFocus: boolean;\r\n  constructor(\r\n    private userService: UserService,\r\n    private formBuilder: FormBuilder,\r\n    private firstnameElement: ElementRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    \r\n    this.fitnessForm = this.formBuilder.group({\r\n      firstname: [\r\n        null,\r\n        [\r\n        Validators.required,\r\n        Validators.pattern(this.noNummbersValidation),\r\n        ]\r\n      ],\r\n      lastname: [\r\n        null,\r\n        [\r\n        Validators.required,\r\n        Validators.pattern(this.noNummbersValidation),\r\n        ]\r\n      ],\r\n      email:[\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.pattern(this.emailValidation)\r\n        ]\r\n      ],\r\n      age: [\r\n        null, [       \r\n          Validators.required, Validators.min(19),Validators.max(59)\r\n        ],\r\n      ],\r\n      phonenumber:[\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.pattern(this.numberValidation),\r\n          Validators.minLength(8),\r\n          Validators.maxLength(10)\r\n        ]\r\n      ],\r\n      streetaddress:[null,[Validators.required]],\r\n      pincode:[\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(6),\r\n          Validators.minLength(6),\r\n          Validators.pattern(this.numberValidation),\r\n        ]\r\n      ],\r\n      city:[null,[Validators.required]],\r\n      state:[null,[Validators.required]],\r\n      country:[null,[Validators.required,Validators.pattern(this.noNummbersValidation)]],\r\n      inr:[null,[Validators.required]],\r\n      trainerpreference:[null,[Validators.required]],\r\n      packages:[null,[Validators.required]],\r\n      paisa:[null,[Validators.required]],\r\n\r\n\r\n    });\r\n    this.firstnameElement.nativeElement.focus();\r\n\r\n  }\r\npublic ngAfterContentInit() {\r\n\r\n}\r\n\r\n  \r\n\r\n  onSubmit() {\r\n    //use try catch\r\n\r\n    if(this.fitnessForm.valid){\r\n      \r\n  \r\n     this.userService\r\n      .postfitnessdata(\r\n        new Fitness(\r\n          this.fitnessForm.value.firstname,\r\n          this.fitnessForm.value.lastname.value,\r\n          this.fitnessForm.value.age,\r\n          this.fitnessForm.value.phonenumber,\r\n          this.fitnessForm.value.email,\r\n          this.fitnessForm.value.streetaddress,\r\n          this.fitnessForm.value.city,\r\n          this.fitnessForm.value.state,\r\n          this.fitnessForm.value.country,\r\n          this.fitnessForm.value.pincode,\r\n          this.fitnessForm.value.trainerpreference,\r\n          \"yes\",\r\n          this.fitnessForm.value.packages,\r\n          this.fitnessForm.value.inr,\r\n          this.fitnessForm.value.paisa,\r\n        )\r\n      )\r\n      .subscribe(\r\n        (res) => {\r\n          alert(\"Appointment Placed\");\r\n        },\r\n        (err) => {\r\n          alert(\"Error in placing the appointment\");\r\n        }\r\n      );\r\n\r\n    \r\n  }\r\n  else{\r\n    alert(\"Form Incomplete !\");\r\n  }\r\n}}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from \"../_services/\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  Validators,\r\n  FormBuilder,\r\n} from \"@angular/forms\";\r\nimport {Fitness} from \"../place-fitness-trainer-appointment/place-fitness-trainer-appointment.component\"\r\nimport { ConstantPool } from '@angular/compiler';\r\n@Component({\r\n  selector: 'app-view-appointment',\r\n  templateUrl: './view-appointment.component.html'\r\n})\r\n\r\n//rewrite the code to make it prettier and recheck\r\nexport class ViewAppointmentComponent implements OnInit {\r\n  errorMsg: String = null;\r\n  tableData: Array<Object>;\r\n  showEditForm: Boolean = false;\r\n  constructor(private userService: UserService, private formBuilder: FormBuilder) { }\r\n\r\n  noNummbersValidation: string = \"[a-zA-Z]*\";\r\n  emailValidation: RegExp = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;\r\n  numberValidation: string = \"[0-9]*\";\r\n  fitnessForm: FormGroup;\r\n  idUpdate: number;\r\n  ngOnInit() {\r\n    \r\n    this.getfitness();\r\n      this.fitnessForm = this.formBuilder.group({\r\n      firstname: [\r\n        null,\r\n        [\r\n        Validators.required,\r\n        Validators.pattern(this.noNummbersValidation),\r\n        ]\r\n      ],\r\n      lastname: [\r\n        null,\r\n        [\r\n        Validators.required,\r\n        Validators.pattern(this.noNummbersValidation),\r\n        ]\r\n      ],\r\n      email:[\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.pattern(this.emailValidation)\r\n        ]\r\n      ],\r\n      age: [\r\n        null, [       \r\n          Validators.required, Validators.min(19),Validators.max(59)\r\n        ],\r\n      ],\r\n      phonenumber:[\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.pattern(this.numberValidation),\r\n          Validators.minLength(8),\r\n          Validators.maxLength(10)\r\n        ]\r\n      ],\r\n      streetaddress:[null,[Validators.required]],\r\n      pincode:[\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(6),\r\n          Validators.minLength(6),\r\n          Validators.pattern(this.numberValidation),\r\n        ]\r\n      ],\r\n      city:[null,[Validators.required]],\r\n      state:[null,[Validators.required]],\r\n      country:[null,[Validators.required,Validators.pattern(this.noNummbersValidation)]],\r\n      inr:[null,[Validators.required]],\r\n      trainerpreference:[null,[Validators.required]],\r\n      physiotherapist:[null,[Validators.required]],\r\n      packages:[null,[Validators.required]],\r\n      paisa:[null,[Validators.required]],\r\n\r\n\r\n    });\r\n  }\r\n\r\n  \r\n editAppointment(id):void{\r\n\r\n  this.showEditForm = true;\r\n  \r\n  this.userService.getfitnessdata(id).subscribe(\r\n  (res) =>  {\r\n    this.setFormFields(res);this.idUpdate = res.id},\r\n  (err) => alert(\"Appointment not found !\")\r\n  );\r\n\r\n  \r\n  \r\n }\r\n setFormFields(result):void{\r\n  this.fitnessForm.setValue({\r\n    firstname: result.firstname,\r\n    lastname: result.lastname,\r\n    age: result.age,\r\n    phonenumber: result.phonenumber,\r\n    email: result.email,\r\n    streetaddress: result.streetaddress,\r\n    city: result.city,\r\n    state: result.state,\r\n    country: result.country,\r\n    pincode: result.pincode,\r\n    trainerpreference: result.trainerpreference,\r\n    physiotherapist: result.physiotherapist,\r\n    packages: result.packages,\r\n    inr: result.inr,\r\n    paisa: result.paisa,\r\n    \r\n  });\r\n  console.log(this.fitnessForm)\r\n }\r\n\r\n saveAppointment():void{\r\n  if(this.fitnessForm.valid){\r\n      \r\n  \r\n    this.userService\r\n     .updatefitnessdata(this.idUpdate,\r\n       new Fitness(\r\n         this.fitnessForm.value.firstname,\r\n         this.fitnessForm.value.lastname,\r\n         this.fitnessForm.value.age,\r\n         this.fitnessForm.value.phonenumber,\r\n         this.fitnessForm.value.email,\r\n         this.fitnessForm.value.streetaddress,\r\n         this.fitnessForm.value.city,\r\n         this.fitnessForm.value.state,\r\n         this.fitnessForm.value.country,\r\n         this.fitnessForm.value.pincode,\r\n         this.fitnessForm.value.trainerpreference,\r\n         \"yes\",\r\n         this.fitnessForm.value.packages,\r\n         this.fitnessForm.value.inr,\r\n         this.fitnessForm.value.paisa,\r\n       )\r\n     )\r\n     .subscribe(\r\n       (res) => {\r\n         alert(\"Appointment Updated\");\r\n         this.showEditForm = false;\r\n         console.log(res);\r\n       },\r\n       (err) => {\r\n         alert(\"Error in updating the appointment\");\r\n       }\r\n     );\r\n\r\n   \r\n }\r\n else{\r\n   alert(\"Form Incomplete !\");\r\n }\r\n}\r\n  \r\n  tableUpdate(data):void{\r\n    this.tableData = data;\r\n    \r\n  }\r\n  getfitness():void{\r\n   this.userService.getfitnessdata().subscribe(\r\n      (i) =>  this.tableUpdate(i),\r\n      (err) => alert(\"error\")\r\n\r\n    )\r\n  }\r\n  \r\n  deletefitness(id):void{\r\n    const confirmDelete = confirm(\"Confirm to delete ?\");\r\n    if(confirmDelete)\r\n    {\r\n    this.userService.deletedata(id).subscribe(\r\n      (i)=> {alert(\"appointment deleted !\"); location.reload()},\r\n      (err)=> alert(\"Error occured while deleting the appointment\")\r\n    )\r\n    }\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}